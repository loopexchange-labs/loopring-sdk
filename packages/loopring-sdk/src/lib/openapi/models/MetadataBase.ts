/* tslint:disable */
/* eslint-disable */
/**
 * SDK for Loopring Layer 2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface MetadataBase
 */
export interface MetadataBase {
    /**
     * Name
     * @type {string}
     * @memberof MetadataBase
     */
    name: string;
    /**
     * Decimals
     * @type {number}
     * @memberof MetadataBase
     */
    decimals: number;
    /**
     * Description
     * @type {string}
     * @memberof MetadataBase
     */
    description: string;
    /**
     * Image
     * @type {string}
     * @memberof MetadataBase
     */
    image: string;
    /**
     * Properties
     * @type {string}
     * @memberof MetadataBase
     */
    properties: string;
    /**
     * Localization
     * @type {string}
     * @memberof MetadataBase
     */
    localization: string;
    /**
     * Unix timestamp in milliseconds
     * @type {number}
     * @memberof MetadataBase
     */
    createdAt?: number;
    /**
     * Unix timestamp in milliseconds
     * @type {number}
     * @memberof MetadataBase
     */
    updatedAt?: number;
}

/**
 * Check if a given object implements the MetadataBase interface.
 */
export function instanceOfMetadataBase(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "decimals" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "image" in value;
    isInstance = isInstance && "properties" in value;
    isInstance = isInstance && "localization" in value;

    return isInstance;
}

export function MetadataBaseFromJSON(json: any): MetadataBase {
    return MetadataBaseFromJSONTyped(json, false);
}

export function MetadataBaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): MetadataBase {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'decimals': json['decimals'],
        'description': json['description'],
        'image': json['image'],
        'properties': json['properties'],
        'localization': json['localization'],
        'createdAt': !exists(json, 'createdAt') ? undefined : json['createdAt'],
        'updatedAt': !exists(json, 'updatedAt') ? undefined : json['updatedAt'],
    };
}

export function MetadataBaseToJSON(value?: MetadataBase | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'decimals': value.decimals,
        'description': value.description,
        'image': value.image,
        'properties': value.properties,
        'localization': value.localization,
        'createdAt': value.createdAt,
        'updatedAt': value.updatedAt,
    };
}

