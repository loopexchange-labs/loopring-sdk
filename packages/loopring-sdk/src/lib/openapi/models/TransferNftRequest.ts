/* tslint:disable */
/* eslint-disable */
/**
 * SDK for Loopring Layer 2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CounterfactualWalletInfo } from './CounterfactualWalletInfo';
import {
    CounterfactualWalletInfoFromJSON,
    CounterfactualWalletInfoFromJSONTyped,
    CounterfactualWalletInfoToJSON,
} from './CounterfactualWalletInfo';
import type { NftTokenAmountInfo } from './NftTokenAmountInfo';
import {
    NftTokenAmountInfoFromJSON,
    NftTokenAmountInfoFromJSONTyped,
    NftTokenAmountInfoToJSON,
} from './NftTokenAmountInfo';
import type { TokenAmountInfo } from './TokenAmountInfo';
import {
    TokenAmountInfoFromJSON,
    TokenAmountInfoFromJSONTyped,
    TokenAmountInfoToJSON,
} from './TokenAmountInfo';

/**
 * 
 * @export
 * @interface TransferNftRequest
 */
export interface TransferNftRequest {
    /**
     * Exchange address
     * @type {string}
     * @memberof TransferNftRequest
     */
    exchange: string;
    /**
     * Sender address
     * @type {string}
     * @memberof TransferNftRequest
     */
    fromAddress: string;
    /**
     * Sender accountId
     * @type {number}
     * @memberof TransferNftRequest
     */
    fromAccountId: number;
    /**
     * Receiver address
     * @type {string}
     * @memberof TransferNftRequest
     */
    toAddress: string;
    /**
     * Receiver accountId, can set to 0 if dont have one
     * @type {number}
     * @memberof TransferNftRequest
     */
    toAccountId: number;
    /**
     * 
     * @type {NftTokenAmountInfo}
     * @memberof TransferNftRequest
     */
    token: NftTokenAmountInfo;
    /**
     * 
     * @type {TokenAmountInfo}
     * @memberof TransferNftRequest
     */
    maxFee: TokenAmountInfo;
    /**
     * the offchain id
     * @type {number}
     * @memberof TransferNftRequest
     */
    storageId: number;
    /**
     * Timestamp for transfer to become invalid, seconds, normally current time + 2 months
     * @type {number}
     * @memberof TransferNftRequest
     */
    validUntil: number;
    /**
     * eddsa signature of the eddsa hash
     * @type {string}
     * @memberof TransferNftRequest
     */
    eddsaSignature?: string;
    /**
     * (Optional) memo
     * @type {string}
     * @memberof TransferNftRequest
     */
    memo?: string;
    /**
     * (Optional) payPayeeUpdateAccount
     * @type {boolean}
     * @memberof TransferNftRequest
     */
    payPayeeUpdateAccount?: boolean;
    /**
     * 
     * @type {CounterfactualWalletInfo}
     * @memberof TransferNftRequest
     */
    counterFactualInfo?: CounterfactualWalletInfo;
}

/**
 * Check if a given object implements the TransferNftRequest interface.
 */
export function instanceOfTransferNftRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "exchange" in value;
    isInstance = isInstance && "fromAddress" in value;
    isInstance = isInstance && "fromAccountId" in value;
    isInstance = isInstance && "toAddress" in value;
    isInstance = isInstance && "toAccountId" in value;
    isInstance = isInstance && "token" in value;
    isInstance = isInstance && "maxFee" in value;
    isInstance = isInstance && "storageId" in value;
    isInstance = isInstance && "validUntil" in value;

    return isInstance;
}

export function TransferNftRequestFromJSON(json: any): TransferNftRequest {
    return TransferNftRequestFromJSONTyped(json, false);
}

export function TransferNftRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransferNftRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'exchange': json['exchange'],
        'fromAddress': json['fromAddress'],
        'fromAccountId': json['fromAccountId'],
        'toAddress': json['toAddress'],
        'toAccountId': json['toAccountId'],
        'token': NftTokenAmountInfoFromJSON(json['token']),
        'maxFee': TokenAmountInfoFromJSON(json['maxFee']),
        'storageId': json['storageId'],
        'validUntil': json['validUntil'],
        'eddsaSignature': !exists(json, 'eddsaSignature') ? undefined : json['eddsaSignature'],
        'memo': !exists(json, 'memo') ? undefined : json['memo'],
        'payPayeeUpdateAccount': !exists(json, 'payPayeeUpdateAccount') ? undefined : json['payPayeeUpdateAccount'],
        'counterFactualInfo': !exists(json, 'counterFactualInfo') ? undefined : CounterfactualWalletInfoFromJSON(json['counterFactualInfo']),
    };
}

export function TransferNftRequestToJSON(value?: TransferNftRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'exchange': value.exchange,
        'fromAddress': value.fromAddress,
        'fromAccountId': value.fromAccountId,
        'toAddress': value.toAddress,
        'toAccountId': value.toAccountId,
        'token': NftTokenAmountInfoToJSON(value.token),
        'maxFee': TokenAmountInfoToJSON(value.maxFee),
        'storageId': value.storageId,
        'validUntil': value.validUntil,
        'eddsaSignature': value.eddsaSignature,
        'memo': value.memo,
        'payPayeeUpdateAccount': value.payPayeeUpdateAccount,
        'counterFactualInfo': CounterfactualWalletInfoToJSON(value.counterFactualInfo),
    };
}

