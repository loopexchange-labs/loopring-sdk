/* tslint:disable */
/* eslint-disable */
/**
 * SDK for Loopring Layer 2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TokenAmountInfo } from './TokenAmountInfo';
import {
    TokenAmountInfoFromJSON,
    TokenAmountInfoFromJSONTyped,
    TokenAmountInfoToJSON,
} from './TokenAmountInfo';

/**
 * 
 * @export
 * @interface NFTMintRequestV3
 */
export interface NFTMintRequestV3 {
    /**
     * Exchange address
     * @type {string}
     * @memberof NFTMintRequestV3
     */
    exchange: string;
    /**
     * minter address
     * @type {string}
     * @memberof NFTMintRequestV3
     */
    minterAddress: string;
    /**
     * minter accountID
     * @type {number}
     * @memberof NFTMintRequestV3
     */
    minterId: number;
    /**
     * to address
     * @type {string}
     * @memberof NFTMintRequestV3
     */
    toAddress: string;
    /**
     * to accountId
     * @type {number}
     * @memberof NFTMintRequestV3
     */
    toAccountId: number;
    /**
     * 0 for ERC1155, 1 for ERC721, now only support ERC1155
     * @type {number}
     * @memberof NFTMintRequestV3
     */
    nftType: NFTMintRequestV3NftTypeEnum;
    /**
     * tokenAddress
     * @type {string}
     * @memberof NFTMintRequestV3
     */
    tokenAddress: string;
    /**
     * nftId
     * @type {string}
     * @memberof NFTMintRequestV3
     */
    nftId: string;
    /**
     * how many tokens to mint
     * @type {string}
     * @memberof NFTMintRequestV3
     */
    amount: string;
    /**
     * fee to the creator of each NFT transaction. 1 ~ 10, percentage
     * @type {number}
     * @memberof NFTMintRequestV3
     */
    royaltyPercentage: number;
    /**
     * 
     * @type {TokenAmountInfo}
     * @memberof NFTMintRequestV3
     */
    maxFee: TokenAmountInfo;
    /**
     * the offchain id of fee token
     * @type {number}
     * @memberof NFTMintRequestV3
     */
    storageId: number;
    /**
     * Timestamp for transfer to become invalid, seconds
     * @type {number}
     * @memberof NFTMintRequestV3
     */
    validUntil: number;
    /**
     * eddsa signature of the eddsa hash
     * @type {string}
     * @memberof NFTMintRequestV3
     */
    eddsaSignature: string;
}


/**
 * @export
 */
export const NFTMintRequestV3NftTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type NFTMintRequestV3NftTypeEnum = typeof NFTMintRequestV3NftTypeEnum[keyof typeof NFTMintRequestV3NftTypeEnum];


/**
 * Check if a given object implements the NFTMintRequestV3 interface.
 */
export function instanceOfNFTMintRequestV3(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "exchange" in value;
    isInstance = isInstance && "minterAddress" in value;
    isInstance = isInstance && "minterId" in value;
    isInstance = isInstance && "toAddress" in value;
    isInstance = isInstance && "toAccountId" in value;
    isInstance = isInstance && "nftType" in value;
    isInstance = isInstance && "tokenAddress" in value;
    isInstance = isInstance && "nftId" in value;
    isInstance = isInstance && "amount" in value;
    isInstance = isInstance && "royaltyPercentage" in value;
    isInstance = isInstance && "maxFee" in value;
    isInstance = isInstance && "storageId" in value;
    isInstance = isInstance && "validUntil" in value;
    isInstance = isInstance && "eddsaSignature" in value;

    return isInstance;
}

export function NFTMintRequestV3FromJSON(json: any): NFTMintRequestV3 {
    return NFTMintRequestV3FromJSONTyped(json, false);
}

export function NFTMintRequestV3FromJSONTyped(json: any, ignoreDiscriminator: boolean): NFTMintRequestV3 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'exchange': json['exchange'],
        'minterAddress': json['minterAddress'],
        'minterId': json['minterId'],
        'toAddress': json['toAddress'],
        'toAccountId': json['toAccountId'],
        'nftType': json['nftType'],
        'tokenAddress': json['tokenAddress'],
        'nftId': json['nftId'],
        'amount': json['amount'],
        'royaltyPercentage': json['royaltyPercentage'],
        'maxFee': TokenAmountInfoFromJSON(json['maxFee']),
        'storageId': json['storageId'],
        'validUntil': json['validUntil'],
        'eddsaSignature': json['eddsaSignature'],
    };
}

export function NFTMintRequestV3ToJSON(value?: NFTMintRequestV3 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'exchange': value.exchange,
        'minterAddress': value.minterAddress,
        'minterId': value.minterId,
        'toAddress': value.toAddress,
        'toAccountId': value.toAccountId,
        'nftType': value.nftType,
        'tokenAddress': value.tokenAddress,
        'nftId': value.nftId,
        'amount': value.amount,
        'royaltyPercentage': value.royaltyPercentage,
        'maxFee': TokenAmountInfoToJSON(value.maxFee),
        'storageId': value.storageId,
        'validUntil': value.validUntil,
        'eddsaSignature': value.eddsaSignature,
    };
}

