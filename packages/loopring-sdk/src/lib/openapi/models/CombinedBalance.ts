/* tslint:disable */
/* eslint-disable */
/**
 * SDK for Loopring Layer 2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Collection } from './Collection';
import {
    CollectionFromJSON,
    CollectionFromJSONTyped,
    CollectionToJSON,
} from './Collection';
import type { Metadata } from './Metadata';
import {
    MetadataFromJSON,
    MetadataFromJSONTyped,
    MetadataToJSON,
} from './Metadata';
import type { PendingBalance } from './PendingBalance';
import {
    PendingBalanceFromJSON,
    PendingBalanceFromJSONTyped,
    PendingBalanceToJSON,
} from './PendingBalance';
import type { Preference } from './Preference';
import {
    PreferenceFromJSON,
    PreferenceFromJSONTyped,
    PreferenceToJSON,
} from './Preference';

/**
 * 
 * @export
 * @interface CombinedBalance
 */
export interface CombinedBalance {
    /**
     * ID
     * @type {number}
     * @memberof CombinedBalance
     */
    id: number;
    /**
     * AccountID
     * @type {number}
     * @memberof CombinedBalance
     */
    accountId: number;
    /**
     * tokenId
     * @type {number}
     * @memberof CombinedBalance
     */
    tokenId: number;
    /**
     * (Optional) Users NFT token nftData
     * @type {string}
     * @memberof CombinedBalance
     */
    nftData: string;
    /**
     * (Optional) token address
     * @type {string}
     * @memberof CombinedBalance
     */
    tokenAddress: string;
    /**
     * nft type
     * @type {string}
     * @memberof CombinedBalance
     */
    nftType: CombinedBalanceNftTypeEnum;
    /**
     * (Optional) nft id
     * @type {string}
     * @memberof CombinedBalance
     */
    nftId: string;
    /**
     * total amount
     * @type {string}
     * @memberof CombinedBalance
     */
    total: string;
    /**
     * frozen amount
     * @type {string}
     * @memberof CombinedBalance
     */
    locked: string;
    /**
     * 
     * @type {PendingBalance}
     * @memberof CombinedBalance
     */
    pending: PendingBalance;
    /**
     * is counterFactual NFT or not
     * @type {boolean}
     * @memberof CombinedBalance
     */
    isCounterFactualNFT: boolean;
    /**
     * minter of nft
     * @type {string}
     * @memberof CombinedBalance
     */
    minter: string;
    /**
     * royalty percentage
     * @type {number}
     * @memberof CombinedBalance
     */
    royaltyPercentage: number;
    /**
     * tokenAddress deploy status
     * @type {string}
     * @memberof CombinedBalance
     */
    deploymentStatus: CombinedBalanceDeploymentStatusEnum;
    /**
     * 
     * @type {Preference}
     * @memberof CombinedBalance
     */
    preference?: Preference;
    /**
     * 
     * @type {Metadata}
     * @memberof CombinedBalance
     */
    metadata?: Metadata;
    /**
     * 
     * @type {Collection}
     * @memberof CombinedBalance
     */
    collectionInfo?: Collection;
    /**
     * Unix timestamp in milliseconds
     * @type {number}
     * @memberof CombinedBalance
     */
    balanceUpdatedAt?: number;
    /**
     * Unix timestamp in milliseconds
     * @type {number}
     * @memberof CombinedBalance
     */
    updatedAt?: number;
}


/**
 * @export
 */
export const CombinedBalanceNftTypeEnum = {
    Erc1155: 'ERC1155',
    Erc721: 'ERC721'
} as const;
export type CombinedBalanceNftTypeEnum = typeof CombinedBalanceNftTypeEnum[keyof typeof CombinedBalanceNftTypeEnum];

/**
 * @export
 */
export const CombinedBalanceDeploymentStatusEnum = {
    NotDeployed: 'NOT_DEPLOYED',
    Deploying: 'DEPLOYING',
    Deployed: 'DEPLOYED'
} as const;
export type CombinedBalanceDeploymentStatusEnum = typeof CombinedBalanceDeploymentStatusEnum[keyof typeof CombinedBalanceDeploymentStatusEnum];


/**
 * Check if a given object implements the CombinedBalance interface.
 */
export function instanceOfCombinedBalance(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "accountId" in value;
    isInstance = isInstance && "tokenId" in value;
    isInstance = isInstance && "nftData" in value;
    isInstance = isInstance && "tokenAddress" in value;
    isInstance = isInstance && "nftType" in value;
    isInstance = isInstance && "nftId" in value;
    isInstance = isInstance && "total" in value;
    isInstance = isInstance && "locked" in value;
    isInstance = isInstance && "pending" in value;
    isInstance = isInstance && "isCounterFactualNFT" in value;
    isInstance = isInstance && "minter" in value;
    isInstance = isInstance && "royaltyPercentage" in value;
    isInstance = isInstance && "deploymentStatus" in value;

    return isInstance;
}

export function CombinedBalanceFromJSON(json: any): CombinedBalance {
    return CombinedBalanceFromJSONTyped(json, false);
}

export function CombinedBalanceFromJSONTyped(json: any, ignoreDiscriminator: boolean): CombinedBalance {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'accountId': json['accountId'],
        'tokenId': json['tokenId'],
        'nftData': json['nftData'],
        'tokenAddress': json['tokenAddress'],
        'nftType': json['nftType'],
        'nftId': json['nftId'],
        'total': json['total'],
        'locked': json['locked'],
        'pending': PendingBalanceFromJSON(json['pending']),
        'isCounterFactualNFT': json['isCounterFactualNFT'],
        'minter': json['minter'],
        'royaltyPercentage': json['royaltyPercentage'],
        'deploymentStatus': json['deploymentStatus'],
        'preference': !exists(json, 'preference') ? undefined : PreferenceFromJSON(json['preference']),
        'metadata': !exists(json, 'metadata') ? undefined : MetadataFromJSON(json['metadata']),
        'collectionInfo': !exists(json, 'collectionInfo') ? undefined : CollectionFromJSON(json['collectionInfo']),
        'balanceUpdatedAt': !exists(json, 'balanceUpdatedAt') ? undefined : json['balanceUpdatedAt'],
        'updatedAt': !exists(json, 'updatedAt') ? undefined : json['updatedAt'],
    };
}

export function CombinedBalanceToJSON(value?: CombinedBalance | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'accountId': value.accountId,
        'tokenId': value.tokenId,
        'nftData': value.nftData,
        'tokenAddress': value.tokenAddress,
        'nftType': value.nftType,
        'nftId': value.nftId,
        'total': value.total,
        'locked': value.locked,
        'pending': PendingBalanceToJSON(value.pending),
        'isCounterFactualNFT': value.isCounterFactualNFT,
        'minter': value.minter,
        'royaltyPercentage': value.royaltyPercentage,
        'deploymentStatus': value.deploymentStatus,
        'preference': PreferenceToJSON(value.preference),
        'metadata': MetadataToJSON(value.metadata),
        'collectionInfo': CollectionToJSON(value.collectionInfo),
        'balanceUpdatedAt': value.balanceUpdatedAt,
        'updatedAt': value.updatedAt,
    };
}

