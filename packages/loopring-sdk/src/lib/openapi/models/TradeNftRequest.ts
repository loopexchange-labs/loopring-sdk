/* tslint:disable */
/* eslint-disable */
/**
 * SDK for Loopring Layer 2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { NftMakerOrder } from './NftMakerOrder';
import {
    NftMakerOrderFromJSON,
    NftMakerOrderFromJSONTyped,
    NftMakerOrderToJSON,
} from './NftMakerOrder';
import type { NftTakerOrder } from './NftTakerOrder';
import {
    NftTakerOrderFromJSON,
    NftTakerOrderFromJSONTyped,
    NftTakerOrderToJSON,
} from './NftTakerOrder';

/**
 * 
 * @export
 * @interface TradeNftRequest
 */
export interface TradeNftRequest {
    /**
     * 
     * @type {NftMakerOrder}
     * @memberof TradeNftRequest
     */
    maker: NftMakerOrder;
    /**
     * maker fee bips
     * @type {number}
     * @memberof TradeNftRequest
     */
    makerFeeBips: number;
    /**
     * 
     * @type {NftTakerOrder}
     * @memberof TradeNftRequest
     */
    taker: NftTakerOrder;
    /**
     * taker fee bips
     * @type {number}
     * @memberof TradeNftRequest
     */
    takerFeeBips: number;
}

/**
 * Check if a given object implements the TradeNftRequest interface.
 */
export function instanceOfTradeNftRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "maker" in value;
    isInstance = isInstance && "makerFeeBips" in value;
    isInstance = isInstance && "taker" in value;
    isInstance = isInstance && "takerFeeBips" in value;

    return isInstance;
}

export function TradeNftRequestFromJSON(json: any): TradeNftRequest {
    return TradeNftRequestFromJSONTyped(json, false);
}

export function TradeNftRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): TradeNftRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'maker': NftMakerOrderFromJSON(json['maker']),
        'makerFeeBips': json['makerFeeBips'],
        'taker': NftTakerOrderFromJSON(json['taker']),
        'takerFeeBips': json['takerFeeBips'],
    };
}

export function TradeNftRequestToJSON(value?: TradeNftRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'maker': NftMakerOrderToJSON(value.maker),
        'makerFeeBips': value.makerFeeBips,
        'taker': NftTakerOrderToJSON(value.taker),
        'takerFeeBips': value.takerFeeBips,
    };
}

