/* tslint:disable */
/* eslint-disable */
/**
 * SDK for Loopring Layer 2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccountInfo,
  CounterfactualWalletInfo,
  NextStorageIdInfo,
  ResultInfo,
  UserApiKey,
} from '../models/index';
import {
    AccountInfoFromJSON,
    AccountInfoToJSON,
    CounterfactualWalletInfoFromJSON,
    CounterfactualWalletInfoToJSON,
    NextStorageIdInfoFromJSON,
    NextStorageIdInfoToJSON,
    ResultInfoFromJSON,
    ResultInfoToJSON,
    UserApiKeyFromJSON,
    UserApiKeyToJSON,
} from '../models/index';

export interface GetAccountRequest {
    owner?: string;
    accountId?: number;
}

export interface GetCounterFactualInfoRequest {
    accountId: number;
}

export interface GetNextStorageIdRequest {
    accountId: number;
    sellTokenId: number;
    maxNext?: boolean;
    xAPIKEY: string;
}

export interface GetUserApiKeyRequest {
    accountId: number;
    xAPISIG: string;
}

/**
 * 
 */
export class AccountApi extends runtime.BaseAPI {

    /**
     * One of owner and accountId is required.
     * Get Account info
     */
    async getAccountRaw(requestParameters: GetAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountInfo>> {
        const queryParameters: any = {};

        if (requestParameters.owner !== undefined) {
            queryParameters['owner'] = requestParameters.owner;
        }

        if (requestParameters.accountId !== undefined) {
            queryParameters['accountId'] = requestParameters.accountId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v3/account`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountInfoFromJSON(jsonValue));
    }

    /**
     * One of owner and accountId is required.
     * Get Account info
     */
    async getAccount(requestParameters: GetAccountRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountInfo> {
        const response = await this.getAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Counterfactual Wallet Info
     */
    async getCounterFactualInfoRaw(requestParameters: GetCounterFactualInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CounterfactualWalletInfo>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getCounterFactualInfo.');
        }

        const queryParameters: any = {};

        if (requestParameters.accountId !== undefined) {
            queryParameters['accountId'] = requestParameters.accountId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v3/counterFactualInfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CounterfactualWalletInfoFromJSON(jsonValue));
    }

    /**
     * Counterfactual Wallet Info
     */
    async getCounterFactualInfo(requestParameters: GetCounterFactualInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CounterfactualWalletInfo> {
        const response = await this.getCounterFactualInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetches the next order id for a given sold token. If the need arises to repeatedly place orders in a short span of time, the order id can be initially fetched through the API and then managed locally. Each new order id can be derived from adding 2 to the last one.
     * Storage Id
     */
    async getNextStorageIdRaw(requestParameters: GetNextStorageIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NextStorageIdInfo>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getNextStorageId.');
        }

        if (requestParameters.sellTokenId === null || requestParameters.sellTokenId === undefined) {
            throw new runtime.RequiredError('sellTokenId','Required parameter requestParameters.sellTokenId was null or undefined when calling getNextStorageId.');
        }

        if (requestParameters.xAPIKEY === null || requestParameters.xAPIKEY === undefined) {
            throw new runtime.RequiredError('xAPIKEY','Required parameter requestParameters.xAPIKEY was null or undefined when calling getNextStorageId.');
        }

        const queryParameters: any = {};

        if (requestParameters.accountId !== undefined) {
            queryParameters['accountId'] = requestParameters.accountId;
        }

        if (requestParameters.sellTokenId !== undefined) {
            queryParameters['sellTokenId'] = requestParameters.sellTokenId;
        }

        if (requestParameters.maxNext !== undefined) {
            queryParameters['maxNext'] = requestParameters.maxNext;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAPIKEY !== undefined && requestParameters.xAPIKEY !== null) {
            headerParameters['X-API-KEY'] = String(requestParameters.xAPIKEY);
        }

        const response = await this.request({
            path: `/api/v3/storageId`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NextStorageIdInfoFromJSON(jsonValue));
    }

    /**
     * Fetches the next order id for a given sold token. If the need arises to repeatedly place orders in a short span of time, the order id can be initially fetched through the API and then managed locally. Each new order id can be derived from adding 2 to the last one.
     * Storage Id
     */
    async getNextStorageId(requestParameters: GetNextStorageIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NextStorageIdInfo> {
        const response = await this.getNextStorageIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the ApiKey associated with the user\'s account
     */
    async getUserApiKeyRaw(requestParameters: GetUserApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserApiKey>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getUserApiKey.');
        }

        if (requestParameters.xAPISIG === null || requestParameters.xAPISIG === undefined) {
            throw new runtime.RequiredError('xAPISIG','Required parameter requestParameters.xAPISIG was null or undefined when calling getUserApiKey.');
        }

        const queryParameters: any = {};

        if (requestParameters.accountId !== undefined) {
            queryParameters['accountId'] = requestParameters.accountId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAPISIG !== undefined && requestParameters.xAPISIG !== null) {
            headerParameters['X-API-SIG'] = String(requestParameters.xAPISIG);
        }

        const response = await this.request({
            path: `/api/v3/apiKey`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserApiKeyFromJSON(jsonValue));
    }

    /**
     * Get the ApiKey associated with the user\'s account
     */
    async getUserApiKey(requestParameters: GetUserApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserApiKey> {
        const response = await this.getUserApiKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
