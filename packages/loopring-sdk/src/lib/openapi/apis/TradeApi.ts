/* tslint:disable */
/* eslint-disable */
/**
 * SDK for Loopring Layer 2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TradeNftRequest,
  TradeNftResponse,
} from '../models/index';
import {
    TradeNftRequestFromJSON,
    TradeNftRequestToJSON,
    TradeNftResponseFromJSON,
    TradeNftResponseToJSON,
} from '../models/index';

export interface TradeNftOperationRequest {
    xAPIKEY: string;
    xAPISIG: string;
    tradeNftRequest: TradeNftRequest;
}

/**
 * 
 */
export class TradeApi extends runtime.BaseAPI {

    /**
     * Trade NFT.
     * Trade NFT
     */
    async tradeNftRaw(requestParameters: TradeNftOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TradeNftResponse>> {
        if (requestParameters.xAPIKEY === null || requestParameters.xAPIKEY === undefined) {
            throw new runtime.RequiredError('xAPIKEY','Required parameter requestParameters.xAPIKEY was null or undefined when calling tradeNft.');
        }

        if (requestParameters.xAPISIG === null || requestParameters.xAPISIG === undefined) {
            throw new runtime.RequiredError('xAPISIG','Required parameter requestParameters.xAPISIG was null or undefined when calling tradeNft.');
        }

        if (requestParameters.tradeNftRequest === null || requestParameters.tradeNftRequest === undefined) {
            throw new runtime.RequiredError('tradeNftRequest','Required parameter requestParameters.tradeNftRequest was null or undefined when calling tradeNft.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAPIKEY !== undefined && requestParameters.xAPIKEY !== null) {
            headerParameters['X-API-KEY'] = String(requestParameters.xAPIKEY);
        }

        if (requestParameters.xAPISIG !== undefined && requestParameters.xAPISIG !== null) {
            headerParameters['X-API-SIG'] = String(requestParameters.xAPISIG);
        }

        const response = await this.request({
            path: `/api/v3/nft/trade`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TradeNftRequestToJSON(requestParameters.tradeNftRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TradeNftResponseFromJSON(jsonValue));
    }

    /**
     * Trade NFT.
     * Trade NFT
     */
    async tradeNft(requestParameters: TradeNftOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TradeNftResponse> {
        const response = await this.tradeNftRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
